Similar to HashMap, Vector internally uses a primitive Array# which we can't
add ! annotations to. Luckily, primitive operations are never called directly
but via instance methods of Data.Vector.Generic.{Vector,MVector} which can be
overridden. So that's what this patch does.

There remains a very small chance that future changes will break this and use
primitive operations directly; if you update Vector you should check that:

- Vector/Autogen.hs does not use newArray/writeArray[1] anywhere
- Vector/Autogen/Mutable.hs only applies newArray/writeArray[1] to an
  element-typed parameter of the parent function where the parameter has a bang
  pattern on it; except that `newArray _ uninitialised` is OK.

[1] or any other primitive operations that take an element-type input i.e. with
type ([.. ->] a -> ..), e.g. from Data.Primitive.Array or a GHC primop.

For more discussion see https://github.com/haskell/vector/issues/380

diff --git b/src/Data/Strict/Vector/Autogen.hs a/src/Data/Strict/Vector/Autogen.hs
index 0e4fdcb..9f526c5 100644
--- b/src/Data/Strict/Vector/Autogen.hs
+++ a/src/Data/Strict/Vector/Autogen.hs
@@ -177,8 +177,8 @@ module Data.Strict.Vector.Autogen (
 
 import Data.Strict.Vector.Autogen.Mutable  ( MVector(..) )
 import Data.Primitive.Array
-import qualified Data.Strict.Vector.Autogen.Fusion.Bundle as Bundle
-import qualified Data.Strict.Vector.Autogen.Generic as G
+import qualified Data.Vector.Fusion.Bundle as Bundle
+import qualified Data.Vector.Generic as G
 
 import Control.DeepSeq ( NFData(rnf)
 #if MIN_VERSION_deepseq(1,4,3)
@@ -199,7 +199,7 @@ import Data.Function ( fix )
 
 import Prelude
   ( Eq, Ord, Num, Enum, Monoid, Functor, Monad, Show, Bool, Ordering(..), Int, Maybe, Either
-  , compare, mempty, mappend, mconcat, return, showsPrec, fmap, otherwise, id, flip, const
+  , compare, mempty, mappend, mconcat, return, showsPrec, fmap, otherwise, id, flip, const, seq
   , (>>=), (+), (-), (<), (<=), (>), (>=), (==), (/=), (&&), (.), ($) )
 
 import Data.Functor.Classes (Eq1 (..), Ord1 (..), Read1 (..), Show1 (..))
@@ -285,6 +285,9 @@ instance G.Vector Vector a where
   basicUnsafeCopy (MVector i n dst) (Vector j _ src)
     = copyArray dst i src j n
 
+  {-# INLINE elemseq #-}
+  elemseq _ = seq
+
 -- See http://trac.haskell.org/vector/ticket/12
 instance Eq a => Eq (Vector a) where
   {-# INLINE (==) #-}
diff --git b/src/Data/Strict/Vector/Autogen/Mutable.hs a/src/Data/Strict/Vector/Autogen/Mutable.hs
index 05d8b03..bc2418b 100644
--- b/src/Data/Strict/Vector/Autogen/Mutable.hs
+++ a/src/Data/Strict/Vector/Autogen/Mutable.hs
@@ -71,7 +71,7 @@ module Data.Strict.Vector.Autogen.Mutable (
 ) where
 
 import           Control.Monad (when, liftM)
-import qualified Data.Strict.Vector.Autogen.Generic.Mutable as G
+import qualified Data.Vector.Generic.Mutable as G
 import           Data.Strict.Vector.Autogen.Internal.Check
 import           Data.Primitive.Array
 import           Control.Monad.Primitive
@@ -135,7 +135,7 @@ instance G.MVector MVector a where
   basicInitialize _ = return ()
 
   {-# INLINE basicUnsafeReplicate #-}
-  basicUnsafeReplicate n x
+  basicUnsafeReplicate n !x
     = do
         arr <- newArray n x
         return (MVector 0 n arr)
@@ -144,7 +144,7 @@ instance G.MVector MVector a where
   basicUnsafeRead (MVector i _ arr) j = readArray arr (i+j)
 
   {-# INLINE basicUnsafeWrite #-}
-  basicUnsafeWrite (MVector i _ arr) j x = writeArray arr (i+j) x
+  basicUnsafeWrite (MVector i _ arr) j !x = writeArray arr (i+j) x
 
   {-# INLINE basicUnsafeCopy #-}
   basicUnsafeCopy (MVector i n dst) (MVector j _ src)

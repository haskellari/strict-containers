--- a/tests/Tests/Move.hs
+++ b/tests/Tests/Move.hs
@@ -13,9 +13,7 @@
 import qualified Data.Vector.Generic as G
 import qualified Data.Vector.Generic.Mutable as M
 
-import qualified Data.Vector as V
-import qualified Data.Vector.Primitive as P
-import qualified Data.Vector.Storable as S
+import qualified Data.Strict.Vector as V
 import qualified Data.Vector.Unboxed as U
 
 basicMove :: G.Vector v a => v a -> Int -> Int -> Int -> v a
@@ -43,7 +41,4 @@
 
 tests =
     [testProperty "Data.Vector.Mutable (Move)" (testMove :: V.Vector Int -> Property),
-     testProperty "Data.Vector.Primitive.Mutable (Move)" (testMove :: P.Vector Int -> Property),
-     testProperty "Data.Vector.Unboxed.Mutable (Move)" (testMove :: U.Vector Int -> Property),
-     testProperty "Data.Vector.Storable.Mutable (Move)" (testMove :: S.Vector Int -> Property),
      testProperty "Data.Vector.Generic.Mutable (nextPermutation)" testPermutations]
--- a/tests/Tests/Vector.hs
+++ b/tests/Tests/Vector.hs
@@ -3,13 +3,7 @@
 
 import Test.Tasty (testGroup)
 import qualified Tests.Vector.Boxed
-import qualified Tests.Vector.Primitive
-import qualified Tests.Vector.Storable
-import qualified Tests.Vector.Unboxed
 
 tests =
   [ testGroup "Tests.Vector.Boxed" Tests.Vector.Boxed.tests
-  , testGroup "Tests.Vector.Primitive" Tests.Vector.Primitive.tests
-  , testGroup "Tests.Vector.Storable" Tests.Vector.Storable.tests
-  , testGroup "Tests.Vector.Unboxed" Tests.Vector.Unboxed.tests
   ]
--- a/tests/Tests/Vector/Boxed.hs
+++ b/tests/Tests/Vector/Boxed.hs
@@ -2,15 +2,15 @@
 module Tests.Vector.Boxed (tests) where
 
 import Test.Tasty
-import qualified Data.Vector
+import qualified Data.Strict.Vector
 import Tests.Vector.Property
 
 import GHC.Exts (inline)
 
 
 testGeneralBoxedVector
-  :: forall a. (CommonContext a Data.Vector.Vector, Ord a, Data a)
-  => Data.Vector.Vector a -> [TestTree]
+  :: forall a. (CommonContext a Data.Strict.Vector.Vector, Ord a, Data a)
+  => Data.Strict.Vector.Vector a -> [TestTree]
 testGeneralBoxedVector dummy = concatMap ($ dummy)
   [
     testSanity
@@ -34,8 +34,8 @@
   ]
 
 testNumericBoxedVector
-  :: forall a. (CommonContext a Data.Vector.Vector, Ord a, Num a, Enum a, Random a, Data a)
-  => Data.Vector.Vector a -> [TestTree]
+  :: forall a. (CommonContext a Data.Strict.Vector.Vector, Ord a, Num a, Enum a, Random a, Data a)
+  => Data.Strict.Vector.Vector a -> [TestTree]
 testNumericBoxedVector dummy = concatMap ($ dummy)
   [
     testGeneralBoxedVector
@@ -45,8 +45,8 @@
 
 tests =
   [ testGroup "Bool" $
-    testBoolBoxedVector (undefined :: Data.Vector.Vector Bool)
+    testBoolBoxedVector (undefined :: Data.Strict.Vector.Vector Bool)
   , testGroup "Int" $
-    testNumericBoxedVector (undefined :: Data.Vector.Vector Int)
-  , testGroup "unstream" $ testUnstream (undefined :: Data.Vector.Vector Int)
+    testNumericBoxedVector (undefined :: Data.Strict.Vector.Vector Int)
+  , testGroup "unstream" $ testUnstream (undefined :: Data.Strict.Vector.Vector Int)
   ]
--- a/tests/Tests/Vector/UnitTests.hs
+++ b/tests/Tests/Vector/UnitTests.hs
@@ -1,3 +1,4 @@
+
 {-# LANGUAGE ScopedTypeVariables #-}
 
 module Tests.Vector.UnitTests (tests) where
@@ -11,9 +12,9 @@
 import Data.Typeable
 import qualified Data.List as List
 import qualified Data.Vector.Generic  as Generic
-import qualified Data.Vector as Boxed
-import qualified Data.Vector.Internal.Check as Check
-import qualified Data.Vector.Mutable as MBoxed
+import qualified Data.Strict.Vector as Boxed
+import qualified Data.Strict.Vector.Autogen.Internal.Check as Check
+import qualified Data.Strict.Vector.Autogen.Mutable as MBoxed
 import qualified Data.Vector.Primitive as Primitive
 import qualified Data.Vector.Storable as Storable
 import qualified Data.Vector.Unboxed as Unboxed
--- a/tests/Utilities.hs
+++ b/tests/Utilities.hs
@@ -5,7 +5,7 @@
 import Test.QuickCheck
 
 import Data.Foldable
-import qualified Data.Vector as DV
+import qualified Data.Strict.Vector as DV
 import qualified Data.Vector.Generic as DVG
 import qualified Data.Vector.Primitive as DVP
 import qualified Data.Vector.Storable as DVS
--- a/tests/intmap-strictness.hs
+++ b/tests/intmap-strictness.hs
@@ -1,4 +1,5 @@
 {-# LANGUAGE CPP #-}
+{-# LANGUAGE BangPatterns #-}
 {-# OPTIONS_GHC -fno-warn-orphans #-}
 
 module Main (main) where
@@ -14,8 +15,8 @@
 
 import Data.Strict.IntMap.Autogen.Strict (IntMap)
 import qualified Data.Strict.IntMap.Autogen.Strict as M
-import qualified Data.Strict.IntMap.Autogen as L
-import Data.Containers.ListUtils
+import qualified Data.IntMap.Lazy as L
+import qualified Data.IntSet as IntSet
 
 import Utils.IsUnit
 #if __GLASGOW_HASKELL__ >= 806
@@ -116,6 +117,25 @@
 pStrictFoldl' m = whnfHasNoThunks (M.foldl' (flip (:)) [] m)
 #endif
 
+-- copy over definitions from Data.Containers.Utils so we can support older GHC
+-- that have older versions of containers without this module
+nubInt :: [Int] -> [Int]
+nubInt = nubIntOn id
+{-# INLINE nubInt #-}
+
+nubIntOn :: (a -> Int) -> [a] -> [a]
+nubIntOn f = \xs -> nubIntOnExcluding f IntSet.empty xs
+{-# INLINE nubIntOn #-}
+
+nubIntOnExcluding :: (a -> Int) -> IntSet.IntSet -> [a] -> [a]
+nubIntOnExcluding f = go
+  where
+    go _ [] = []
+    go s (x:xs)
+      | fx `IntSet.member` s = go s xs
+      | otherwise = x : go (IntSet.insert fx s) xs
+      where !fx = f x
+
 ------------------------------------------------------------------------
 -- check for extra thunks
 --
@@ -156,7 +176,10 @@
     , check "insertWith"      False $ L.insertWith const 42 () m0
     , check "fromList"        True  $ L.fromList [(42,()),(42,())]
     , check "fromListWith"    False $ L.fromListWith const [(42,()),(42,())]
+#if MIN_VERSION_containers(0,6,3)
+    -- see https://github.com/haskell/containers/issues/473
     , check "fromAscList"     True  $ L.fromAscList [(42,()),(42,())]
+#endif
     , check "fromAscListWith" False $ L.fromAscListWith const [(42,()),(42,())]
     , check "fromDistinctAscList" True $ L.fromAscList [(42,())]
     ]
--- a/tests/map-strictness.hs
+++ b/tests/map-strictness.hs
@@ -15,7 +15,7 @@
 
 import Data.Strict.Map.Autogen.Strict (Map)
 import qualified Data.Strict.Map.Autogen.Strict as M
-import qualified Data.Strict.Map.Autogen as L
+import qualified Data.Map.Lazy as L
 
 import Utils.IsUnit
 #if __GLASGOW_HASKELL__ >= 806
--- a/tests/seq-properties.hs
+++ b/tests/seq-properties.hs
@@ -38,7 +38,7 @@
 import Test.Tasty
 import Test.Tasty.QuickCheck hiding ((><))
 import Test.QuickCheck.Function (apply)
-import Test.QuickCheck.Poly (A, OrdA, B, OrdB, C)
+import Test.QuickCheck.Poly (A, OrdA, B(..), OrdB, C)
 import Control.Monad.Zip (MonadZip (..))
 import Control.DeepSeq (deepseq)
 import Control.Monad.Fix (MonadFix (..))
@@ -798,16 +798,13 @@
 -- We want to ensure that
 --
 -- munzip xs = xs `seq` (fmap fst x, fmap snd x)
---
--- even in the presence of bottoms (alternatives are all balance-
--- fragile).
 prop_munzipLazy :: Seq (Integer, B) -> Bool
 prop_munzipLazy pairs = deepseq ((`seq` ()) <$> repaired) True
   where
     partialpairs = mapWithIndex (\i a -> update i err pairs) pairs
     firstPieces = fmap (fst . munzip) partialpairs
     repaired = mapWithIndex (\i s -> update i 10000 s) firstPieces
-    err = error "munzip isn't lazy enough"
+    err = (0, B 0)
 
 -- Applicative operations
 
--- a/strict-containers.cabal
+++ b/strict-containers.cabal
@@ -259,7 +259,7 @@
 test-suite vector-tests-O0
   Default-Language: Haskell2010
   type: exitcode-stdio-1.0
-  Main-Is:  Main.hs
+  Main-Is:  VectorMain.hs
 
   other-modules: Boilerplater
                  Tests.Bundle
@@ -267,14 +267,11 @@
                  Tests.Vector
                  Tests.Vector.Property
                  Tests.Vector.Boxed
-                 Tests.Vector.Storable
-                 Tests.Vector.Primitive
-                 Tests.Vector.Unboxed
                  Tests.Vector.UnitTests
                  Utilities
 
   hs-source-dirs: tests
-  Build-Depends: base >= 4.5 && < 5, template-haskell, base-orphans >= 0.6, vector,
+  Build-Depends: base >= 4.5 && < 5, template-haskell, base-orphans >= 0.6, vector, strict-containers,
                  primitive, random,
                  QuickCheck >= 2.9 && < 2.15, HUnit, tasty,
                  tasty-hunit, tasty-quickcheck,
@@ -293,10 +290,6 @@
   Ghc-Options: -O0 -threaded
   Ghc-Options: -Wall
 
-  if !flag(Wall)
-    Ghc-Options: -fno-warn-orphans -fno-warn-missing-signatures
-    if impl(ghc >= 8.0) && impl(ghc < 8.1)
-      Ghc-Options: -Wno-redundant-constraints
 
 
 -- DO NOT EDIT above, AUTOGEN tests
